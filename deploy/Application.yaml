AWSTemplateFormatVersion: "2010-09-09"
Description: "Application stack for the Dinkum Coin API"
Outputs:
  LoadBalancerUrl:
    Value: !Sub "http://api.dinkumcoin.${HostedZoneName}"
  LoadBalancerDNS:
    Value: !GetAtt "LoadBalancer.DNSName"
  AsgArn: 
    Value: !Ref "AutoScalingGroup"
  AsgMinSize:
    Description: "The minimum size of the Auto Scaling Group"
    Value: !Ref "MinInstanceCount"
  Version:
    Value: !Ref "VersionToDeploy"
Parameters:
  AmiId:
    Description: "Machine image ID"
    Type: "AWS::EC2::Image::Id"
  AlbSecurityGroupIds:
    Description: "IDs of security groups to allow Inbound traffic to ALB"
    Type: "String"
  HostedZoneName:
    Description: "Name of the hosted zone"
    Type: "String"
  InstanceType:
    Description: "Type of autoscaling instance"
    Type: "String"    
  Ec2SecurityGroupIds:
    Description: "IDs of security groups to apply to the EC2 instances"
    Type: "String"
  EnvironmentName:
    Description: "Environment name of the Dinkum Coin API"
    Type: "String"
  EnvironmentShortName:
    Description: "Environment name of the Dinkum Coin API in lowercase"
    Type: "String"
  MinInstanceCount:
    Description: "The minimum number of instances for the ASG"
    Type: "Number"
  MaxInstanceCount:
    Description: "The maximum number of instances for the ASG"
    Type: "Number"
  DesiredInstanceCount:
    Description: "The desired number of instances for the ASG"
    Type: "Number"
  KeyPairName:
    Description: "Name of EC2 key pair for logging in to the instances"
    Type: "String"
  LogLambdaArn:
    Description: "The ARN of the Lambda function to use with CloudWatch Log subscriptions"
    Type: "String"
  S3BucketName:
    Description: "S3 Bucket Name containing the Dinkum Coin API"
    Type: "String"
  SubnetIds:
    Description: "Subnets to associate with the ASG"
    Type: "List<AWS::EC2::Subnet::Id>"
  VersionToDeploy:
    Description: "Version of the Dinkum Coin API to deploy"
    Type: "String"
  VpcCidr:
    Description: "VPC CIDR"
    Type: "String"
  VpcId:
    Description: "ID of the VPC in which the Dinkum Coin API is located"
    Type: "AWS::EC2::VPC::Id"
Resources:
  Dns:
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      RecordSets:
        - Name: !Sub "api.dinkumcoin.${HostedZoneName}."
          Type: "A"
          AliasTarget:
            HostedZoneId: !GetAtt [ "LoadBalancer", "CanonicalHostedZoneID" ]
            DNSName: !GetAtt [ "LoadBalancer", "DNSName" ]
    Type: "AWS::Route53::RecordSetGroup"
  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: "Allow inbound traffic from within the VPC"
      SecurityGroupIngress:
      - CidrIp: !Ref "VpcCidr"
        FromPort: 80
        IpProtocol: "tcp"
        ToPort: 80
      VpcId: !Ref "VpcId"
    Type: "AWS::EC2::SecurityGroup"
  Listener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: "80"
      Protocol: "HTTP"
    Type: "AWS::ElasticLoadBalancingV2::Listener"
  LoadBalancer:
    Properties:
      Scheme: "internet-facing"
      SecurityGroups: !Split [ ",", !Join [ ",", [ !Ref "AlbSecurityGroupIds", !Ref "LoadBalancerSecurityGroup" ] ] ]
      Subnets: !Ref "SubnetIds"
      Tags:
        - Key: "Platform"
          Value: "Dinkum Coin API"
        - Key: "Department"
          Value: "QA"
        - Key: "environment"
          Value: !Ref "EnvironmentName"
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  TargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/api/values"
      HealthCheckPort: 5000
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 5000
      Protocol: "HTTP"
      Tags:
        - Key: "Platform"
          Value: "Dinkum Coin API"
        - Key: "Department"
          Value: "QA"
        - Key: "environment"
          Value: !Ref "EnvironmentName"
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 15
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VpcId"
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  Ec2SecurityGroup:
    Properties:
      GroupDescription: "Allow load balancer traffic to instances"
      SecurityGroupIngress:
        - FromPort: 5000
          IpProtocol: "tcp"
          SourceSecurityGroupId: !Ref "LoadBalancerSecurityGroup"
          ToPort: 5000
      VpcId: !Ref "VpcId"
    Type: "AWS::EC2::SecurityGroup"
  InstanceProfile:
    Properties:
      Path: "/"
      Roles:
        - !Ref "InstanceRole"
    Type: "AWS::IAM::InstanceProfile"
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: "2012-10-17"
      Path: "/"
    Type: "AWS::IAM::Role"
  Policy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Effect: "Allow"
            Resource: "arn:aws:logs:*:*:*"
          - Action:
              - cloudformation:DescribeStacks
              - ec2:Describe*
            Effect: "Allow"
            Resource: "*"
          - Action:
              - s3:ListBucket
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Action:
              - s3:GetObject
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Effect: "Allow"
            Resource: !Sub "arn:aws:ssm:*:*:parameter/DinkumCoinApi/${EnvironmentName}/*"
        Version: "2012-10-17"
      PolicyName: "DinkumCoinApi"
      Roles:
        - !Ref "InstanceRole"
    Type: "AWS::IAM::Policy"    
  AutoScalingGroup:
    Properties:
      HealthCheckGracePeriod: 300
      MetricsCollection:
        - Granularity: "1Minute"
      HealthCheckType: "ELB"
      LaunchConfigurationName: !Ref "LaunchConfiguration"
      DesiredCapacity: !Ref "DesiredInstanceCount"
      MaxSize: !Ref "MaxInstanceCount"
      MinSize: !Ref "MinInstanceCount"
      Tags:
        - Key: "Name"
          PropagateAtLaunch: true
          Value: !Sub "DinkumCoin-${EnvironmentName}"
        - Key: "bp-snapshot-policy"
          PropagateAtLaunch: true
          Value: "never"
        - Key: "Version"
          PropagateAtLaunch: true
          Value: !Ref "VersionToDeploy"
      TargetGroupARNs: [ !Ref "TargetGroup" ]
      TerminationPolicies:
        - "OldestInstance"
      VPCZoneIdentifier: !Ref "SubnetIds"
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: "S3"
          roleName: !Ref "InstanceRole"
      AWS::CloudFormation::Init:
        config:
          services:
            sysvinit:
              awslogs:
                enabled: "true"
                ensureRunning: "true"
                commands:
                  - "templatize_awslogs"
          files:
            /etc/awslogs/awslogs.conf.sh:
              authentication: "S3AccessCreds"
              mode: "000644"
              owner: "root"
              group: "root"
              source: !Sub "https://s3-ap-southeast-2.amazonaws.com/${S3BucketName}/${VersionToDeploy}/ec2/awslogs.conf.sh"
          commands:
            templatize_awslogs:
              command: !Sub "VersionToDeploy='${VersionToDeploy}' AppLogGroupName='${AppLogGroup}' SysLogGroupName='${SyslogLogGroup}' EnvironmentName='${EnvironmentName}' bash /etc/awslogs/awslogs.conf.sh > /etc/awslogs/awslogs.conf"
    CreationPolicy:
      ResourceSignal:
        Count: !Ref "MinInstanceCount"
        Timeout: "PT5M"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref "MinInstanceCount"
        PauseTime: "PT5M"
        WaitOnResourceSignals: true
    Type: "AWS::AutoScaling::AutoScalingGroup"
  ScaleUpPolicy:
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "AutoScalingGroup"
      Cooldown: "600"
      ScalingAdjustment: 1
    Type: "AWS::AutoScaling::ScalingPolicy"
  ScaleDownPolicy:
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "AutoScalingGroup"
      Cooldown: "600"
      ScalingAdjustment: -1
    Type: "AWS::AutoScaling::ScalingPolicy"
  ScaleUpCpuCreditBalanceAlarm:
    Properties:
      AlarmDescription: "Scale up if average CPU Credits goes below 27 for 5 minutes"
      MetricName: "CPUCreditBalance"
      Namespace: "AWS/EC2"
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 27
      AlarmActions:
        - !Ref "ScaleUpPolicy"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AutoScalingGroup"
      ComparisonOperator: "LessThanThreshold"
    Type: "AWS::CloudWatch::Alarm"
  ScaleDownCpuCreditBalanceAlarm:
    Properties:
      AlarmDescription: "Scale down if average CPU Credits goes above 37 for 5 minutes"
      MetricName: "CPUCreditBalance"
      Namespace: "AWS/EC2"
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 37
      AlarmActions:
        - !Ref "ScaleDownPolicy"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AutoScalingGroup"
      ComparisonOperator: "GreaterThanThreshold"
    Type: "AWS::CloudWatch::Alarm"
  LaunchConfiguration:
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref "InstanceProfile"
      ImageId: !Ref "AmiId"
      InstanceType: !Sub "${InstanceType}"
      KeyName: !Ref "KeyPairName"
      SecurityGroups: !Split [ ",", !Join [ ",", [ !Ref "Ec2SecurityGroupIds", !Ref "Ec2SecurityGroup"] ] ]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x

            exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1
            (
                set -e
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

                cd /opt
                aws s3 cp s3://${S3BucketName}/${VersionToDeploy}/DinkumCoin.Api_${VersionToDeploy}.zip .
                unzip DinkumCoin.Api_${VersionToDeploy}.zip -d DinkumCoin.Api
                
                echo "DinkumCoinApi_Environment=\"${EnvironmentName}\"" >> /etc/environment
                
                echo "ASPNETCORE_Environment=\"${EnvironmentName}\"" >> /etc/environment
                
                set -o allexport; source /etc/environment; set +o allexport

                cd ./DinkumCoin.Api
                chmod +x ./DinkumCoin.Api
                ./DinkumCoin.Api <&- &

            )
            /opt/aws/bin/cfn-signal -s true --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Type: "AWS::AutoScaling::LaunchConfiguration"
  AppLogGroup:
    Properties:
      LogGroupName: !Sub "DinkumCoin-Api-${EnvironmentName}/applog"
      RetentionInDays: 365
    Type: "AWS::Logs::LogGroup"
  AppLogGroupInvokeLambdaPermission:
    Properties:
      FunctionName: !Ref "LogLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceArn: !GetAtt "AppLogGroup.Arn"
    Type: "AWS::Lambda::Permission"
  AppLogLambdaSubscription:
    DependsOn: "AppLogGroupInvokeLambdaPermission"
    Properties:
      DestinationArn: !Ref "LogLambdaArn"
      FilterPattern: ""
      LogGroupName: !Ref "AppLogGroup"
    Type: "AWS::Logs::SubscriptionFilter"
  SyslogLogGroup:
    Properties:
      LogGroupName: !Sub "DinkumCoin-Api-${EnvironmentName}/syslog"
      RetentionInDays: 365
    Type: "AWS::Logs::LogGroup"
  SysLogGroupInvokeLambdaPermission:
    Properties:
      FunctionName: !Ref "LogLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceArn: !GetAtt "SyslogLogGroup.Arn"
    Type: "AWS::Lambda::Permission"
  SysLogLambdaSubscription:
    DependsOn: "SysLogGroupInvokeLambdaPermission"
    Properties:
      DestinationArn: !Ref "LogLambdaArn"
      FilterPattern: ""
      LogGroupName: !Ref "SyslogLogGroup"
    Type: "AWS::Logs::SubscriptionFilter"